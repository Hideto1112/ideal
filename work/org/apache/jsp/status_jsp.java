/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.20
 * Generated at: 2021-05-18 08:47:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import controller.*;
import model.*;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.time.format.*;
import java.time.Period;
import java.time.temporal.TemporalAdjusters;

public final class status_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	static String fmtNull(String s){
		if(s == null || s.equals("")){
			s = "&nbsp";
		}
		return s;

	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/incFile.jsp", Long.valueOf(1619838047794L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("controller");
    _jspx_imports_packages.add("java.time.format");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("model");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.time.Period");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.LocalDateTime");
    _jspx_imports_classes.add("java.time.temporal.TemporalAdjusters");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n");
      out.write("<title>Status</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"status2.css\"/>\r\n");
      out.write("<style>\r\n");
      out.write("<!--\r\n");
      out.write("table{\r\n");
      out.write("\tmargin: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("thead {\r\n");
      out.write("\tborder:1px solid;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".table1 tr th{\r\n");
      out.write("\tborder:1px solid;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("-->\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      model.User userInfo = null;
      synchronized (session) {
        userInfo = (model.User) _jspx_page_context.getAttribute("userInfo", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (userInfo == null){
          userInfo = new model.User();
          _jspx_page_context.setAttribute("userInfo", userInfo, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');
      model.Reserve reserve = null;
      reserve = (model.Reserve) _jspx_page_context.getAttribute("reserve", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (reserve == null){
        reserve = new model.Reserve();
        _jspx_page_context.setAttribute("reserve", reserve, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      java.util.ArrayList status = null;
      status = (java.util.ArrayList) _jspx_page_context.getAttribute("status", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (status == null){
        status = new java.util.ArrayList();
        _jspx_page_context.setAttribute("status", status, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      model.BaseDate baseDate = null;
      baseDate = (model.BaseDate) _jspx_page_context.getAttribute("baseDate", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (baseDate == null){
        baseDate = new model.BaseDate();
        _jspx_page_context.setAttribute("baseDate", baseDate, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      out.write('	');


		String base = baseDate.getBaseDate();
System.out.println("status.jsp basedate= " + base);
		LocalDate ld = LocalDate.parse(base);
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyy年MM月dd日");
		DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern("yyy年MM月");
		DateTimeFormatter dtf3 = DateTimeFormatter.ofPattern("dd日");
		LocalDate ld3 = ld.plusDays(1L);
System.out.println("status.jsp ld3= " + ld3);
		LocalDate nextMonth = ld3.with(TemporalAdjusters.lastDayOfMonth());
		int per = Period.between(ld, nextMonth).getDays();
System.out.println("status.jsp per= " + per);
		int cnt = 0;
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<table cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr class=\"table1\">\r\n");
      out.write("\t\t\t\t<th style=\"border:1px solid\" rowspan=\"2\" >\r\n");
      out.write("\t\t\t\t\t<a href=\"StatusSvl?mode=7&baseDate=");
      out.print( base );
      out.write("\"><span>前の一週間</span></a>\r\n");
      out.write("\t\t\t\t</th>\r\n");
      out.write("\t\t\t\t");
 if(per >= 14) { 
      out.write("\r\n");
      out.write("\t\t\t\t<th style=\"border:1px solid\" colspan=\"14\">\r\n");
      out.write("\t\t\t\t\t");
      out.print( ld.format(dtf2) );
      out.write("\r\n");
      out.write("\t\t\t\t</th>\r\n");
      out.write("\t\t\t\t");
 }else { 
      out.write("\r\n");
      out.write("\t\t\t\t<th style=\"border:1px solid\" colspan=\"");
      out.print( per );
      out.write("\">\r\n");
      out.write("\t\t\t\t\t");
 if(per >= 3) {
      out.write("\r\n");
      out.write("\t\t\t\t\t");
      out.print( ld.format(dtf2) );
      out.write("\r\n");
      out.write("\t\t\t\t\t");
 }else if(per < 3) {} 
      out.write("\r\n");
      out.write("\t\t\t\t</th>\r\n");
      out.write("\t\t\t\t<th style=\"border:1px solid\" colspan=\"");
      out.print( 14 - per );
      out.write("\">\r\n");
      out.write("\t\t\t\t\t");
 if((14-per) >= 3) {
      out.write("\r\n");
      out.write("\t\t\t\t\t");
      out.print( ld.plusMonths(1).format(dtf2) );
      out.write("\r\n");
      out.write("\t\t\t\t\t");
 }else if((14 - per) < 3) {} 
      out.write("\r\n");
      out.write("\t\t\t\t</th>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t<th style=\"border:1px solid\" rowspan=\"2\"\">\r\n");
      out.write("\t\t\t\t\t<a href=\"StatusSvl?mode=77&baseDate=");
      out.print( base );
      out.write("\"><span>次の一週間</span></a>\r\n");
      out.write("\t\t\t\t</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t");

				for(int i = 0; i < 14; i++) {
					cnt++;
System.out.println("status.jsp cnt= " + cnt);
					LocalDate ld2 = LocalDate.parse(base).plusDays(i + 1);
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<th style=\"border:1px solid\" id=\"day");
      out.print( cnt );
      out.write("\">\r\n");
      out.write("\t\t\t\t\t");
      out.print( ld2.getDayOfMonth() );
      out.write("<br/>(");
      out.print( ld2.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.JAPANESE) );
      out.write(")\r\n");
      out.write("\t\t\t\t</th>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>\r\n");
      out.write("\t\t\t\t<table cellpadding=\"0\" cellspacing=\"0\" >\r\n");
      out.write("\t\t\t\t\t<tr><th>17：00</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>17：15</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>17：30</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>17：45</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>18：00</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>18：15</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>18：30</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>18：45</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>19：00</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>19：15</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>19：30</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>19：45</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>20：00</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>20：15</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>20：30</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>20：45</th></tr>\r\n");
      out.write("\t\t\t\t\t<tr><th>21：00</th></tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</th>\r\n");
      out.write("\t\t\t\t");

						ArrayList<Status> al = (ArrayList<Status>)status;
						int k = 0;
						for(int i = 0; i < 14;i++) {
						int day = ld.getDayOfMonth() + i + 1;
				
      out.write("\r\n");
      out.write("\t\t\t<th>\r\n");
      out.write("\t\t\t\t");

					for(int j = 0; j < 17; j++) {
						Status sts = (Status)al.get(k);
				
      out.write("\r\n");
      out.write("\t\t\t\t<table cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t");
 if(sts.getRsvOk() == 1) {	
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<a href=\"ReserveInsertSvl?&y=");
      out.print( sts.getRsvYy() );
      out.write('&');
      out.write('m');
      out.write('=');
      out.print( sts.getRsvMm() );
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t&d=");
      out.print( sts.getRsvDd() );
      out.write('&');
      out.write('h');
      out.write('=');
      out.print( sts.getRsvHh() );
      out.write("&mi=");
      out.print( sts.getRsvMi() );
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t<span>〇</span>\r\n");
      out.write("\t\t\t\t\t\t");
 }else if(sts.getRsvOk() == 0){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<span>☓</span>\r\n");
      out.write("\t\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t\t");
 }
							k++;
						
      out.write("\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t</th>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t\t<form name=\"status\" action=\"ReserveInsertSvl\" method=\"post\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" id=\"usrId\" name=\"usrId\"/>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<br />\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<div align=\"center\">\r\n");
      out.write("\t\t\t<p id=\"boder\"><a href=\"ReserveListSvl\">予約一覧に戻る</a></p>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
